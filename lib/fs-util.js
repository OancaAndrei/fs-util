// Generated by CoffeeScript 1.10.0
(function() {
  var DirWatcher, EventEmitter, FileWatcher, Watcher, cp, cp_r, find, fs, ls, mkdir_p, os, path, rm_rf, touch, util,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  path = require('path');

  fs = require('fs');

  exports.touch = touch = function(filepath, encoding) {
    var dir_to;
    if (encoding == null) {
      encoding = 'utf-8';
    }
    dir_to = path.dirname(touch);
    return fs.writeFileSync(filepath, '', encoding);
  };

  exports.rm_rf = rm_rf = function(folderpath, root) {
    var file, files, i, len, stats;
    if (root == null) {
      root = true;
    }
    files = fs.readdirSync(path.resolve(folderpath));
    for (i = 0, len = files.length; i < len; i++) {
      file = files[i];
      file = path.resolve(folderpath + "/" + file);
      stats = fs.statSync(file);
      if (stats.isDirectory()) {
        rm_rf(file, false);
        fs.rmdirSync(file);
      } else {
        fs.unlinkSync(file);
      }
    }
    if (root) {
      return fs.rmdirSync(folderpath);
    }
  };

  exports.mkdir_p = mkdir_p = function(fullpath, mode) {
    var exists, folder, folderpath, folders, i, index, len;
    if (mode == null) {
      mode = '0755';
    }
    fullpath = path.resolve(fullpath);
    folders = fullpath.split(path.sep);
    if (folders[0] === '') {
      folders[0] = '/';
    }
    for (index = i = 0, len = folders.length; i < len; index = ++i) {
      folder = folders[index];
      folderpath = path.join.apply(null, folders.slice(0, index + 1));
      exists = fs.existsSync(folderpath);
      if (exists && index === folders.length - 1) {
        throw new Error("Folder exists: " + folder.red);
        return false;
      } else if (!exists) {
        fs.mkdirSync(folderpath, mode);
      }
    }
    return true;
  };

  exports.cp = cp = function(from, to) {
    if (!fs.statSync(from).isDirectory()) {
      return fs.writeFileSync(to, fs.readFileSync(from));
    }
  };

  exports.cp_r = cp_r = function(from, to) {
    var dir_to, file_from, file_to, files, i, len, ref, results;
    from = path.resolve(from);
    to = path.resolve(to);
    if ((from.slice(-1)) === '/') {
      from = from.slice(0, -1);
    }
    if ((to.slice(-1)) === '/') {
      to = to.slice(0, -1);
    }
    ref = (files = find(from, /.*/, false));
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      file_from = ref[i];
      file_to = file_from.replace(from, to);
      dir_to = path.dirname(file_to);
      if (!fs.existsSync(dir_to)) {
        mkdir_p(dir_to);
      }
      results.push(cp(file_from, file_to));
    }
    return results;
  };

  exports.find = find = function(folderpath, patterns, include_dirs) {
    var file, filepath, files, found, found_under, i, j, l, len, len1, len2, pattern;
    if (include_dirs == null) {
      include_dirs = false;
    }
    found = [];
    patterns = [].concat(patterns || /\.+/);
    files = fs.readdirSync(folderpath);
    for (i = 0, len = files.length; i < len; i++) {
      file = files[i];
      filepath = path.join(folderpath, file);
      if ((fs.statSync(filepath)).isDirectory()) {
        if (include_dirs) {
          for (j = 0, len1 = patterns.length; j < len1; j++) {
            pattern = patterns[j];
            if (pattern.test(filepath)) {
              found = found.concat(filepath);
              break;
            }
          }
        }
        found_under = find(filepath, patterns, include_dirs);
        found = found.concat(found_under);
      } else {
        for (l = 0, len2 = patterns.length; l < len2; l++) {
          pattern = patterns[l];
          if (pattern.test(filepath)) {
            found.push(filepath);
          }
        }
      }
    }
    return found;
  };

  exports.ls = ls = function(folderpath) {
    var file, filepath, files, found, i, len;
    found = [];
    files = fs.readdirSync(folderpath);
    for (i = 0, len = files.length; i < len; i++) {
      file = files[i];
      filepath = path.join(folderpath, file);
      found.push(filepath);
    }
    return found;
  };

  fs = require('fs');

  os = require('os');

  path = require('path');

  util = require('util');

  EventEmitter = require('events').EventEmitter;

  FileWatcher = (function() {
    function FileWatcher(watcher, location1, parent, dispatch_created) {
      this.watcher = watcher;
      this.location = location1;
      this.parent = parent;
      this.dispatch_created = dispatch_created != null ? dispatch_created : false;
      this.onchange = bind(this.onchange, this);
      this.config();
      this.init();
      this.watch();
    }

    FileWatcher.prototype.config = function() {
      this.type = 'file';
      return this.curr = fs.statSync(this.location);
    };

    FileWatcher.prototype.init = function() {
      if (this.dispatch_created) {
        return this.watcher.emit('create', this);
      }
    };

    FileWatcher.prototype.watch = function() {
      var options;
      options = {
        persistent: this.watcher.persistent,
        interval: 250
      };
      this._ref = fs.watchFile(this.location, options, this.onchange);
      if (/^win/.test(os.platform())) {
        this._ref.on('error', function() {});
      }
      return this.watcher.emit('watch', this);
    };

    FileWatcher.prototype.unwatch = function() {
      fs.unwatchFile(this.location, this.onchange);
      return this.watcher.emit('unwatch', this);
    };

    FileWatcher.prototype.onchange = function() {
      if (!fs.existsSync(this.location)) {
        this.prev = this.curr;
        this.curr = null;
        return;
      }
      this.prev = this.curr;
      this.curr = fs.statSync(this.location);
      if (this.curr.mtime > this.prev.mtime) {
        return this.watcher.emit('change', this);
      }
    };

    FileWatcher.prototype["delete"] = function() {
      this.unwatch();
      this.parent.tree[this.location] = null;
      delete this.parent.tree[this.location];
      return this.watcher.emit('delete', this);
    };

    return FileWatcher;

  })();

  DirWatcher = (function() {
    function DirWatcher(watcher, location1, parent, dispatch_created) {
      this.watcher = watcher;
      this.location = location1;
      this.parent = parent;
      this.dispatch_created = dispatch_created != null ? dispatch_created : false;
      this.onchange = bind(this.onchange, this);
      this.config();
      this.init();
      this.watch();
    }

    DirWatcher.prototype.config = function() {
      this.type = 'dir';
      this.tree = {};
      return this.curr = fs.statSync(this.location);
    };

    DirWatcher.prototype.init = function() {
      var dir, file, fullpath, i, j, len, len1, name, pattern, ref, ref1;
      ref = fs.readdirSync(this.location);
      for (i = 0, len = ref.length; i < len; i++) {
        name = ref[i];
        fullpath = path.resolve(this.location + "/" + name);
        if (fs.statSync(fullpath).isDirectory()) {
          dir = new DirWatcher(this.watcher, fullpath, this, this.dispatch_created);
          this.tree[fullpath] = dir;
        } else if (fs.statSync(fullpath).isFile()) {
          ref1 = this.watcher.patterns;
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            pattern = ref1[j];
            if (pattern.test(fullpath)) {
              file = new FileWatcher(this.watcher, fullpath, this, this.dispatch_created);
              this.tree[fullpath] = file;
              break;
            }
          }
        }
      }
      if (this.dispatch_created) {
        return this.watcher.emit('create', this);
      }
    };

    DirWatcher.prototype.watch = function() {
      var options;
      options = {
        persistent: this.watcher.persistent,
        interval: 250
      };
      this._ref = fs.watchFile(this.location, options, this.onchange);
      if (/^win/.test(os.platform())) {
        this._ref.on('error', function() {});
      }
      return this.watcher.emit('watch', this);
    };

    DirWatcher.prototype.unwatch = function(propagate) {
      var item, location, ref;
      if (propagate) {
        ref = this.tree;
        for (location in ref) {
          item = ref[location];
          item.unwatch(propagate);
        }
      }
      fs.unwatchFile(this.location);
      return this.watcher.emit('unwatch', this);
    };

    DirWatcher.prototype.onchange = function() {
      var created, deleted, i, j, len, len1, ref, ref1, results;
      if (!fs.existsSync(this.location)) {
        this.prev = this.curr;
        this.curr = null;
        if (this.location === this.watcher.root) {
          this["delete"]();
        }
        return;
      }
      this.prev = this.curr;
      this.curr = fs.statSync(this.location);
      ls = this.diff();
      ref = ls.deleted;
      for (i = 0, len = ref.length; i < len; i++) {
        deleted = ref[i];
        deleted["delete"]();
      }
      ref1 = ls.created;
      results = [];
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        created = ref1[j];
        if (fs.statSync(created).isDirectory()) {
          results.push(this.tree[created] = new DirWatcher(this.watcher, created, this, true));
        } else if (fs.statSync(created).isFile()) {
          results.push(this.tree[created] = new FileWatcher(this.watcher, created, this, true));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    DirWatcher.prototype.diff = function() {
      var curr, fullpath, i, isdir, j, k, len, len1, name, pattern, prev, ref, ref1, status, v;
      prev = this.tree;
      curr = {};
      ref = fs.readdirSync(this.location);
      for (i = 0, len = ref.length; i < len; i++) {
        name = ref[i];
        fullpath = path.resolve(this.location + "/" + name);
        isdir = (fs.statSync(fullpath)).isDirectory();
        ref1 = this.watcher.patterns;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          pattern = ref1[j];
          if (isdir || pattern.test(fullpath)) {
            curr[fullpath] = fullpath;
            break;
          }
        }
      }
      status = {
        deleted: [],
        created: []
      };
      for (k in curr) {
        v = curr[k];
        if (prev[k] == null) {
          status.created.push(v);
        }
      }
      for (k in prev) {
        v = prev[k];
        if (curr[k] == null) {
          status.deleted.push(v);
        }
      }
      return status;
    };

    DirWatcher.prototype["delete"] = function(dispatch_event) {
      var item, location, ref;
      if (dispatch_event == null) {
        dispatch_event = true;
      }
      ref = this.tree;
      for (location in ref) {
        item = ref[location];
        item["delete"](this.watcher.recursive);
      }
      this.unwatch();
      this.parent.tree[this.location] = null;
      delete this.parent.tree[this.location];
      if (dispatch_event) {
        return this.watcher.emit('delete', this);
      }
    };

    return DirWatcher;

  })();

  Watcher = (function(superClass) {
    extend(Watcher, superClass);

    function Watcher(root, patterns, recursive1, persistent1) {
      this.recursive = recursive1 != null ? recursive1 : false;
      this.persistent = persistent1 != null ? persistent1 : true;
      this.config(root);
      this.patterns = [].concat(patterns || /.+/);
      setTimeout((function(_this) {
        return function() {
          return _this.init();
        };
      })(this), 1);
    }

    Watcher.prototype.config = function(root) {
      this.tree = {};
      this.root = path.resolve(root);
      if (!fs.existsSync(this.root)) {
        throw new Error("Not found: " + this.root);
      }
    };

    Watcher.prototype.init = function() {
      if ((fs.statSync(this.root)).isDirectory()) {
        return this.tree[this.root] = new DirWatcher(this, this.root, this);
      } else if ((fs.statSync(this.root)).isFile()) {
        return this.tree[this.root] = new FileWatcher(this, this.root, this);
      }
    };

    Watcher.prototype.close = function() {
      var item;
      item = this.tree[this.root];
      if (item.type === 'dir') {
        item.unwatch(true);
      } else {
        item.unwatch();
      }
      this.removeAllListeners('create');
      this.removeAllListeners('watch');
      this.removeAllListeners('change');
      this.removeAllListeners('unwatch');
      return this.removeAllListeners('delete');
    };

    return Watcher;

  })(EventEmitter);

  exports.watch = function(root, patterns, recursive, persistent) {
    return new Watcher(root, patterns, recursive, persistent);
  };

}).call(this);
