// Generated by CoffeeScript 1.4.0
(function() {
  var DirWatcher, EventEmitter, FileWatcher, Watcher, Win32FolderWatcher, fs, os, path, util,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  os = require('os');

  path = require('path');

  util = require('util');

  EventEmitter = require('events').EventEmitter;

  Win32FolderWatcher = (function() {

    Win32FolderWatcher.prototype.prev = null;

    Win32FolderWatcher.prototype.curr = null;

    Win32FolderWatcher.prototype.interval = null;

    function Win32FolderWatcher(location, listener, interval) {
      this.location = location;
      this.listener = listener;
      this.interval = interval != null ? interval : 30;
      this.check = __bind(this.check, this);

      this.curr = fs.statSync(this.location);
      this.interval_id = setInterval(this.check, 30);
    }

    Win32FolderWatcher.prototype.check = function() {
      var k, v, _ref;
      if (!fs.existsSync(this.location)) {
        return this.listener();
      }
      this.prev = this.curr;
      this.curr = fs.statSync(this.location);
      _ref = this.curr;
      for (k in _ref) {
        v = _ref[k];
        if (this.prev[k] !== v) {
          return this.listener();
        }
      }
    };

    Win32FolderWatcher.prototype.close = function() {
      return clearInterval(this.interval_id);
    };

    return Win32FolderWatcher;

  })();

  FileWatcher = (function() {

    function FileWatcher(watcher, location, parent, dispatch_created) {
      this.watcher = watcher;
      this.location = location;
      this.parent = parent;
      this.dispatch_created = dispatch_created != null ? dispatch_created : false;
      this.onchange = __bind(this.onchange, this);

      this.config();
      this.init();
      this.watch();
    }

    FileWatcher.prototype.config = function() {
      this.type = 'file';
      return this.curr = fs.statSync(this.location);
    };

    FileWatcher.prototype.init = function() {
      if (this.dispatch_created) {
        return this.watcher.emit('create', this);
      }
    };

    FileWatcher.prototype.watch = function() {
      var options;
      options = {
        persistent: this.watcher.persistent
      };
      this._ref = fs.watch(this.location, options, this.onchange);
      return this.watcher.emit('watch', this);
    };

    FileWatcher.prototype.unwatch = function() {
      this._ref.close();
      return this.watcher.emit('unwatch', this);
    };

    FileWatcher.prototype.onchange = function() {
      if (!fs.existsSync(this.location)) {
        this.prev = this.curr;
        this.curr = null;
        return;
      }
      this.prev = this.curr;
      this.curr = fs.statSync(this.location);
      if (this.curr.mtime > this.prev.mtime) {
        return this.watcher.emit('change', this);
      }
    };

    FileWatcher.prototype["delete"] = function() {
      this.unwatch();
      this.parent.tree[this.location] = null;
      delete this.parent.tree[this.location];
      return this.watcher.emit('delete', this);
    };

    return FileWatcher;

  })();

  DirWatcher = (function() {

    function DirWatcher(watcher, location, parent, dispatch_created) {
      this.watcher = watcher;
      this.location = location;
      this.parent = parent;
      this.dispatch_created = dispatch_created != null ? dispatch_created : false;
      this.onchange = __bind(this.onchange, this);

      this.config();
      this.init();
      this.watch();
    }

    DirWatcher.prototype.config = function() {
      this.type = 'dir';
      this.tree = {};
      return this.curr = fs.statSync(this.location);
    };

    DirWatcher.prototype.init = function() {
      var dir, file, fullpath, name, _i, _len, _ref;
      _ref = fs.readdirSync(this.location);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        name = _ref[_i];
        fullpath = path.resolve("" + this.location + "/" + name);
        if (fs.statSync(fullpath).isDirectory()) {
          dir = new DirWatcher(this.watcher, fullpath, this, this.dispatch_created);
          this.tree[fullpath] = dir;
        } else if (fs.statSync(fullpath).isFile()) {
          if (!this.watcher.pattern.test(fullpath)) {
            continue;
          }
          file = new FileWatcher(this.watcher, fullpath, this, this.dispatch_created);
          this.tree[fullpath] = file;
        }
      }
      if (this.dispatch_created) {
        return this.watcher.emit('create', this);
      }
    };

    DirWatcher.prototype.watch = function() {
      var options;
      if (os.platform() === 'win32') {
        this._ref = new Win32FolderWatcher(this.location, this.onchange);
      } else {
        options = {
          persistent: this.watcher.persistent
        };
        this._ref = fs.watch(this.location, options, this.onchange);
      }
      return this.watcher.emit('watch', this);
    };

    DirWatcher.prototype.unwatch = function() {
      this._ref.close();
      return this.watcher.emit('unwatch', this);
    };

    DirWatcher.prototype.onchange = function() {
      var created, deleted, ls, _i, _j, _len, _len1, _ref, _ref1, _results;
      if (!fs.existsSync(this.location)) {
        this.prev = this.curr;
        this.curr = null;
        return;
      }
      this.prev = this.curr;
      this.curr = fs.statSync(this.location);
      ls = this.diff();
      _ref = ls.deleted;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        deleted = _ref[_i];
        deleted["delete"]();
      }
      _ref1 = ls.created;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        created = _ref1[_j];
        if (fs.statSync(created).isDirectory()) {
          _results.push(this.tree[created] = new DirWatcher(this.watcher, created, this, true));
        } else if (fs.statSync(created).isFile()) {
          _results.push(this.tree[created] = new FileWatcher(this.watcher, created, this, true));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    DirWatcher.prototype.diff = function() {
      var curr, fullpath, k, name, prev, status, v, _i, _len, _ref;
      prev = this.tree;
      curr = {};
      _ref = fs.readdirSync(this.location);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        name = _ref[_i];
        fullpath = path.resolve("" + this.location + "/" + name);
        curr[fullpath] = fullpath;
      }
      status = {
        deleted: [],
        created: []
      };
      for (k in curr) {
        v = curr[k];
        if (prev[k] == null) {
          status.created.push(v);
        }
      }
      for (k in prev) {
        v = prev[k];
        if (curr[k] == null) {
          status.deleted.push(v);
        }
      }
      return status;
    };

    DirWatcher.prototype["delete"] = function() {
      var item, location, _ref;
      if (this.watcher.recursive) {
        _ref = this.tree;
        for (location in _ref) {
          item = _ref[location];
          item["delete"]();
        }
      }
      this.unwatch();
      this.parent.tree[this.location] = null;
      delete this.parent.tree[this.location];
      return this.watcher.emit('delete', this);
    };

    return DirWatcher;

  })();

  Watcher = (function(_super) {

    __extends(Watcher, _super);

    function Watcher(root, pattern, persistent, recursive) {
      var _this = this;
      this.pattern = pattern;
      this.persistent = persistent != null ? persistent : true;
      this.recursive = recursive != null ? recursive : false;
      this.config(root);
      setTimeout(function() {
        return _this.init();
      }, 1);
    }

    Watcher.prototype.config = function(root) {
      this.root = path.resolve(root);
      if (!fs.existsSync(this.root)) {
        throw new Error("Not found: " + this.root);
      }
    };

    Watcher.prototype.init = function() {
      return this.tree = new DirWatcher(this, this.root, this);
    };

    return Watcher;

  })(EventEmitter);

  exports.watch = function(root, pattern, persistent, recursive) {
    return new Watcher(root, pattern, persistent, recursive);
  };

}).call(this);
